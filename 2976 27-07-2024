class Solution {
public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        int n = 26;
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        for(int i = 0; i < n; i++){
            dist[i][i] = 0;
        }

        for( int i = 0; i < original.size(); i++){
            int before = original[i] - 'a';
            int after = changed[i] - 'a';
            dist[before][after] = min(dist[before][after], cost[i]);
        }

        for (int k = 0; k < n; ++k) {
            for (int i = 0; i < n; ++i) {
                if (dist[i][k] != INT_MAX) {
                    for (int j = 0; j < n; ++j) {
                        if (dist[k][j] != INT_MAX) {
                            dist[i][j] = std::min(dist[i][j], dist[i][k] + dist[k][j]);
                        }
                    }
                }
            }
        }

        long long min_cost = 0;
        for (int i = 0; i < source.size(); ++i) {
            if (source[i] == target[i]) {
                continue;
            }
            int a = source[i] - 'a';
            int b = target[i] - 'a';
            if (dist[a][b] == INT_MAX) {
                return -1; 
            } else {
                min_cost += static_cast<long long>(dist[a][b]);
            }
        }
        return min_cost;
        
    }
};
