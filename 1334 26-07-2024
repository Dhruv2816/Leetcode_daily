class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        vector<vector<int>> distance = floydWarshall(n, edges);
        int mcount = INT_MAX;
        int mindex = -1;
        for (int i = 0; i < n; ++i) {
            int count = 0;
            for (int j = 0; j < n; ++j) {
                if (i != j && distance[i][j] <= distanceThreshold) {
                    ++count;
                }
            }
            if (count <= mcount) {
                mcount = count;
                mindex = i;
            }
        }
        return mindex;
    }

private:
    vector<vector<int>> floydWarshall(int n, vector<vector<int>>& edges) {
        vector<vector<int>> distance(n, vector<int>(n, INT_MAX));

        for (const auto& edge : edges) {
            distance[edge[0]][edge[1]] = edge[2];
            distance[edge[1]][edge[0]] = edge[2];
        }

        for (int i = 0; i < n; ++i) {
            distance[i][i] = 0;
        }

        for (int k = 0; k < n; ++k) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (distance[i][k] != INT_MAX && distance[k][j] != INT_MAX) {
                        distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j]);
                    }
                }
            }
        }
        return distance;
    }
};
